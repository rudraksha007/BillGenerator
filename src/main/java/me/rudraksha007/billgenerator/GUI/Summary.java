/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package me.rudraksha007.billgenerator.GUI;

import me.rudraksha007.billgenerator.AppFrame;
import me.rudraksha007.billgenerator.Main;
import me.rudraksha007.billgenerator.utilities.DataManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author rudra
 */
public class Summary extends javax.swing.JFrame {

    DataManager data = new DataManager();
    boolean starting = true; //INFO: don't remove, adds all elements to CMBs
    /** Creates new form Summary */
    public Summary() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTableData(data.get("SELECT * FROM Transactions"));
        dtFrom.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (!evt.getPropertyName().equalsIgnoreCase("date"))return;
                setFilteredTableData();
            }
        });
        starting = false;
    }

    @Override
    public void setVisible(boolean visible){
        super.setVisible(visible);
        setTableData(data.get("SELECT * FROM Transactions"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        pnlFilters = new javax.swing.JPanel();
        cmbParty = new javax.swing.JComboBox<>();
        cmbSupplier = new javax.swing.JComboBox<>();
        cmbLocation = new javax.swing.JComboBox<>();
        cmbRemark = new javax.swing.JComboBox<>();
        dtFrom = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dtTo = new com.toedter.calendar.JDateChooser();
        cmbTransaction = new javax.swing.JComboBox<>();
        pnlData = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        pnlSum = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cmbParty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Party" }));
        cmbParty.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPartyItemStateChanged(evt);
            }
        });

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Supplier" }));
        cmbSupplier.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSupplierItemStateChanged(evt);
            }
        });

        cmbLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));
        cmbLocation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbLocationItemStateChanged(evt);
            }
        });

        cmbRemark.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Remarks" }));
        cmbRemark.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRemarkItemStateChanged(evt);
            }
        });

        jLabel1.setText("From");

        jLabel2.setText("To");

        cmbTransaction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Transactions", "Purchase", "Paid To DBC", "Sale", "Pay Received" }));

        javax.swing.GroupLayout pnlFiltersLayout = new javax.swing.GroupLayout(pnlFilters);
        pnlFilters.setLayout(pnlFiltersLayout);
        pnlFiltersLayout.setHorizontalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlFiltersLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16)
                        .addComponent(dtFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cmbParty, 0, 150, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFiltersLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cmbLocation, 0, 150, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbTransaction, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbSupplier, 0, 147, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addComponent(cmbRemark, 0, 149, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlFiltersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        pnlFiltersLayout.setVerticalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbParty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRemark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dtFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No.", "Date", "Party", "Address", "Supplier", "Purchase", "Paid to DBC", "Sale", "Pay Received", "Remark"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout pnlDataLayout = new javax.swing.GroupLayout(pnlData);
        pnlData.setLayout(pnlDataLayout);
        pnlDataLayout.setHorizontalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );
        pnlDataLayout.setVerticalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlSumLayout = new javax.swing.GroupLayout(pnlSum);
        pnlSum.setLayout(pnlSumLayout);
        pnlSumLayout.setHorizontalGroup(
            pnlSumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlSumLayout.setVerticalGroup(
            pnlSumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 82, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPartyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPartyItemStateChanged
        if (evt.getStateChange()!= ItemEvent.SELECTED)return;
        setFilteredTableData();
    }//GEN-LAST:event_cmbPartyItemStateChanged

    private void cmbLocationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbLocationItemStateChanged
        cmbPartyItemStateChanged(evt);
    }//GEN-LAST:event_cmbLocationItemStateChanged

    private void cmbSupplierItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSupplierItemStateChanged
        cmbPartyItemStateChanged(evt);
    }//GEN-LAST:event_cmbSupplierItemStateChanged

    private void cmbRemarkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRemarkItemStateChanged
        cmbPartyItemStateChanged(evt);
    }//GEN-LAST:event_cmbRemarkItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Main.frames.get(AppFrame.home).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Summary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Summary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Summary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Summary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Summary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbLocation;
    private javax.swing.JComboBox<String> cmbParty;
    private javax.swing.JComboBox<String> cmbRemark;
    private javax.swing.JComboBox<String> cmbSupplier;
    private javax.swing.JComboBox<String> cmbTransaction;
    private com.toedter.calendar.JDateChooser dtFrom;
    private com.toedter.calendar.JDateChooser dtTo;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlData;
    private javax.swing.JPanel pnlFilters;
    private javax.swing.JPanel pnlSum;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void setFilteredTableData(){
        StringBuilder command = new StringBuilder("SELECT * FROM Transactions");
        if (cmbParty.getSelectedIndex()!=0){
            command.append(" WHERE Party = '").append(cmbParty.getSelectedItem()).append("'");
        }
        if (cmbLocation.getSelectedIndex()!=0){
            addConditionSeperator(command);
            command.append(" Address = '").append(cmbLocation.getSelectedItem()).append("'");
        }
        if (cmbSupplier.getSelectedIndex()!=0){
            addConditionSeperator(command);
            command.append(" Supplier = '").append(cmbSupplier.getSelectedItem()).append("'");
        }
        if (cmbRemark.getSelectedIndex()!=0){
            addConditionSeperator(command);
            command.append(" Remark = '").append(cmbRemark.getSelectedItem()).append("'");
        }
        if (dtFrom.getDate()!=null){
            addConditionSeperator(command);
            command.append(" Date > '").append(Date.valueOf(LocalDate.ofInstant(dtFrom.getDate().toInstant(), ZoneId.systemDefault())))
                    .append("'");
        }
        if (dtTo.getDate()!=null){
            addConditionSeperator(command);
            command.append(" Date < '").append(Date.valueOf(LocalDate.ofInstant(dtTo.getDate().toInstant(), ZoneId.systemDefault())))
                    .append("'");
        }
        setTableData(data.get(command.toString()));
    }
    public void setTableData(ResultSet set){
        if (set==null)return;
        ((DefaultTableModel)table.getModel()).setRowCount(0);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        List<String> partyModel = new ArrayList<>();
        List<String> locModel = new ArrayList<>();
        List<String> supplierModel = new ArrayList<>();
        List<String> remarkModel = new ArrayList<>();
        String party,loc,supplier,remark;
        try {
            int i=1;
            while (set.next()){
                party = set.getString(2);
                loc = set.getString(3);
                supplier = set.getString(4);
                remark = set.getString(9);
                if (starting){
                    if (!partyModel.contains(party))partyModel.add(party);
                    if (!locModel.contains(loc))locModel.add(loc);
                    if (!supplierModel.contains(supplier))supplierModel.add(supplier);
                    if (!remarkModel.contains(remark))remarkModel.add(remark);
                }
                model.addRow(new Object[]{
                        i, set.getDate(1),party, loc, supplier,set.getFloat(5), set.getFloat(6),
                        set.getFloat(7), set.getFloat(8),remark
                });
                i++;
            }
            set.getStatement().close();
            if (starting){
                ((DefaultComboBoxModel<String>)cmbParty.getModel()).addAll(partyModel);
                ((DefaultComboBoxModel<String>)cmbLocation.getModel()).addAll(locModel);
                ((DefaultComboBoxModel<String>)cmbSupplier.getModel()).addAll(supplierModel);
                ((DefaultComboBoxModel<String>)cmbRemark.getModel()).addAll(remarkModel);
            }
        }catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public StringBuilder addConditionSeperator(StringBuilder s){
        if (s.toString().contains("WHERE"))s.append(" AND");
        else s.append(" WHERE");
        return s;
    }
}
